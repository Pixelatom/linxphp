Models
======
From Wikipedia:

> The model manages the behavior and data of the application domain, responds to requests for information about its state (usually from the view), and responds to instructions to change state (usually from the controller).

Linx includes a powerful Object Relational Mapping (ORM) module that allows for manipulation and control of data within a database as though it was a PHP object. Once you define the relationships ORM allows you to pull data from your database, manipulate the data in any way you like, and then save the result back to the database without the use of SQL. By creating relationships between models that follow convention over configuration, much of the repetition of writing queries to create, read, update, and delete information from the database can be reduced or entirely removed. All of the relationships can be handled automatically by the ORM library and you can access related data as standard object properties.

Creating your Model
-------------------
To create a model for the table members in your database, create the file application/models/member.php with the following syntax:

	class Member extends Model
	{
		...
	}

### Defining Model properties
By default, all public properties of a Model object will be mapped to the database as text fields, but it can be changed setting some configurations directly on the model file. 
Desinging the model is possible adding comments (doc comments format) into the class and it properties using [YAML](http://www.yaml.org/) syntax. This way, all the information related to a model resides in one file.

> YAML is a human friendly data serialization standard for all programming languages.

Example:

	class Member extends Model
	{
		/**
		 * lenght: 32
		 */
		public $name;
	}

### Overriding the Table name
If you wish to change the database table that a model uses, just override it adding a doc comment like this:

	/**
	 * table: users
	 */
	class Member extends Model
	{
		/**
		 * lenght: 32
		 */
		public $name;
	}

### Changing the primary key
Linx assumes each model (and database table) has an id column that is indexed and unique. If your primary key column isn't named id, that's fine - just make sure you set an id for every Model.

	/**
     * type: integer
     * primary_key: true
     * auto_increment: true     
     */
    public $id;

`auto_increment` can be set to `false` in case you want to manage programatically your id value.

Basic Usage
-----------

### Load a new model instance
To create a new Model User instance:

	$user = new User();
	
### Inserting
To insert a new record into the database, create a new instance of the model:

	$user = new User();

Then, assign values for each of the properties;

	$user->first_name = 'Trent';
	$user->last_name = 'Reznor';
	$user->city = 'Mercer';
	$user->state = 'PA';

Insert the new record into the database by running Mapper::save:

	Mapper::save($user);

Mapper::save checks to see if a value is set for the primary key (id by default). If the primary key is set, then Mapper will execute an UPDATE otherwise it will execute an INSERT.

### Finding an object
There are two ways for finding an object, by its id property, or by SQL conditions.

#### Finding by id
To find an object by its id property you should use the Mapper::get_by_id function. Its first argument is the class name of the object you're finding. The second argument is the value of id property. In case more than one properties has been set as id (composite idetifier), you have to pass an array, where the keys are the properties names and the values are the values to be searched. 

	// single id property
	$user = Mapper::get_by_id('User',1); // finds the user with the id = 1
	
	// composite id properties
	$book = Mapper::get_by_id('Book',array('author'=>'Edgar Allan Poe', 'name'=>'The black cat'));

#### Finding by SQL conditions
The function Mapper::get allows you to pass as argument the SQL conditions you want for finding the object.

	// finding by conditions
	$user = Mapper::get('User',"first_name = 'Trent' and last_name = 'Reznor'");

### Updating and Saving
Once an model has been loaded, you can modify a model's properties like this:

	$user->first_name = "Trent";
	$user->last_name = "Reznor";

And if you want to save the changes you just made back to the database, just run a save() call like this:

	Mapper::save($user);

### Deleting
To delete an object, you can call the Mapper::delete method on a loaded model.

	Mapper::delete($user);
